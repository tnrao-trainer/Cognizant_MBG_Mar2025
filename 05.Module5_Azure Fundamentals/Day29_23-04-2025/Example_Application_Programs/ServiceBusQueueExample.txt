using Azure.Messaging.ServiceBus;
using System;
using System.Threading.Tasks;

class Program
{
    // Connection string and queue name
    private static readonly string connectionString = "Endpoint=sb://testnamespace2204.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=a567WSypHoXr0KgkwJfEITrgVrYfgPx0w+ASbFQo2Og=";
	
    private static readonly string queueName = "salesmessages";

    static async Task Main(string[] args)
    {
        // Run sender and receiver tasks
        await SendMessagesAsync();
        await ReceiveMessagesAsync();
    }

    static async Task SendMessagesAsync()
    {
        // Create a ServiceBusClient
        await using var client = new ServiceBusClient(connectionString);

        // Create a sender for the queue
        ServiceBusSender sender = client.CreateSender(queueName);

        try
        {
            // Send multiple messages
            for (int i = 1; i <= 3; i++)
            {
                string messageBody = $"Message {i}: Hello, Azure Service Bus!";
                ServiceBusMessage message = new ServiceBusMessage(messageBody)
                {
                    MessageId = Guid.NewGuid().ToString(),
                    Subject = $"TestMessage{i}"
                };
                message.ApplicationProperties.Add("Priority", i);

                await sender.SendMessageAsync(message);
                Console.WriteLine($"Sent message: {messageBody}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error sending message: {ex.Message}");
        }
    }

    static async Task ReceiveMessagesAsync()
    {
        // Create a ServiceBusClient
        await using var client = new ServiceBusClient(connectionString);

        // Create a processor for the queue
        ServiceBusProcessor processor = client.CreateProcessor(queueName, new ServiceBusProcessorOptions
        {
            AutoCompleteMessages = true, // Automatically complete messages after processing
            MaxConcurrentCalls = 1 // Process one message at a time
        });

        try
        {
            // Define the message handler
            processor.ProcessMessageAsync += async args =>
            {
                string messageBody = args.Message.Body.ToString();
                Console.WriteLine($"Received message: {messageBody} (MessageId: {args.Message.MessageId})");

                // Access custom properties
                if (args.Message.ApplicationProperties.ContainsKey("Priority"))
                {
                    Console.WriteLine($"Priority: {args.Message.ApplicationProperties["Priority"]}");
                }
            };

            // Define the error handler
            processor.ProcessErrorAsync += args =>
            {
                Console.WriteLine($"Error: {args.Exception.Message}");
                return Task.CompletedTask;
            };

            // Start processing
            Console.WriteLine("Starting to process messages from queue...");
            await processor.StartProcessingAsync();

            // Wait for a short period to allow message processing
            await Task.Delay(5000); // Wait 5 seconds to process messages

            // Stop processing
            await processor.StopProcessingAsync();
            Console.WriteLine("Stopped processing messages.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }
}