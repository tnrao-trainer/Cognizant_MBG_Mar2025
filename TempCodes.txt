using System;
 
namespace ConsoleApp21
{

    // Abstract Employee class
    abstract class Employee
    {
        public int EmployeeId { get; set; }
        public string Name { get; set; }

        // Abstract method to calculate salary (must be implemented in derived classes)
        public abstract double CalculateSalary();

        // Concrete method to display employee details
        public void DisplayEmployee()
        {
            Console.WriteLine($"Employee ID: {EmployeeId}, Name: {Name}, Salary: INR.{CalculateSalary()}");
        }
    }

    // Full-time Employee class
    class FullTimeEmployee : Employee
    {
        public double MonthlySalary { get; set; }

        public FullTimeEmployee(int id, string name, double salary)
        {
            EmployeeId = id;
            Name = name;
            MonthlySalary = salary;
        }

        // Implementing abstract method
        public override double CalculateSalary()
        {
            return MonthlySalary; // Fixed monthly salary
        }
    }

    // Part-time Employee class
    class PartTimeEmployee : Employee
    {
        public double HourlyRate { get; set; }
        public int HoursWorked { get; set; }

        public PartTimeEmployee(int id, string name, double rate, int hours)
        {
            EmployeeId = id;
            Name = name;
            HourlyRate = rate;
            HoursWorked = hours;
        }

        // Implementing abstract method
        public override double CalculateSalary()
        {
            return HourlyRate * HoursWorked; // Salary based on hours worked
        }
    }

    class Program
    {
        static void Main()
        {
            // Creating Full-time employee
            Employee emp1 = new FullTimeEmployee(101, "Scott", 50000);

            // Creating Part-time employee
            Employee emp2 = new PartTimeEmployee(102, "Smith", 500, 120); // 2000 per hour, 80 hours worked

            // Display employee details
            emp1.DisplayEmployee();
            emp2.DisplayEmployee();
        }
    }



}
-----------------------------------


using System;
using System.IO;
using System.Runtime.Serialization.Formatters.Binary;

namespace ConsoleApp9
{

    interface ILogger
    {
        void LogInfo(string message);
        void LogError(string message);
        void LogWarning(string message);
    }

    class ConsoleLogger : ILogger
    {
        public void LogError(string message)
        {
            Console.WriteLine("[ERROR] : {0}", message);
        }

        public void LogInfo(string message)
        {
            Console.WriteLine("[INFO] : {0}", message);
        }

        public void LogWarning(string message)
        {
            Console.WriteLine("[WARNING] : {0}", message);
        }
    }




    class Program
    {
        static void Main()
        {

            ConsoleLogger logger = new ConsoleLogger();

            int x, y, z = 0;
            try
            {
                Console.WriteLine("Enter value for X: ");
                x = int.Parse(Console.ReadLine());

                Console.WriteLine("Enter value for Y: ");
                y = int.Parse(Console.ReadLine());

                z = x / y;

                System.Console.WriteLine("Result  :  " + z);
                logger.LogInfo("Process completed successfully");
            }
            catch (Exception e)
            {
                //   Console.WriteLine("Exception Raised. Reason : " + e.Message);
                logger.LogError("Exception Raised. Reason : " + e.Message);
            }



            Console.ReadLine();
        }
    }
}
-----------------------------------


using System;
using System.Collections.Generic;

public class Employee
{
    public int Id { get; set; }
    public string Name { get; set; }
    public double Salary { get; set; }
    
    public override string ToString()
    {
        return $"Id : {Id}, Name : {Name}, Salary : {Salary}";
    }
}

public class Program
{
    public static void Main()
    {
        SortedList<int, Employee> employees = new SortedList<int, Employee>
        {
            { 3, new Employee { Id = 3, Name = "Charlie", Salary = 55000 } },
            { 1, new Employee { Id = 1, Name = "Alice", Salary = 50000 } },
            { 2, new Employee { Id = 2, Name = "Bob", Salary = 60000 } }
        };

        // Access by key
        Employee employeeByKey = employees[2];
      //  Console.WriteLine($"Access by key: Name: {employeeByKey.Name}, Salary: {employeeByKey.Salary}");
          Console.WriteLine($"{employeeByKey}");

        // Access by index
        Employee employeeByIndex = employees.Values[0];
    //    Console.WriteLine($"Access by index: Name: {employeeByIndex.Name}, Salary: {employeeByIndex.Salary}");
         Console.WriteLine($"{employeeByIndex}");

        // Iterate over the SortedList
        foreach (var kvp in employees)
        {
            // Console.WriteLine($"Key: {kvp.Key}, Name: {kvp.Value.Name}, Salary: {kvp.Value.Salary}");
            Console.WriteLine($"Key: {kvp.Key}, Value : {kvp.Value}");
        }

        // Remove an element
        employees.Remove(1);
        Console.WriteLine("After removing key 1:");
        foreach (var kvp in employees)
        {
            Console.WriteLine($"Key: {kvp.Key}, Value : {kvp.Value}");
        }
    }
}

-------------------------


using System;

public struct Point
{
    public int X { get; set; }
    public int Y { get; set; }

    // Constructor
    public Point(int x, int y)
    {
        X = x;
        Y = y;
    }

    // Method
    public void Display()
    {
        Console.WriteLine($"Point: ({X}, {Y})");
    }
}

public class Program
{
    public static void Main()
    {
        // Creating an instance of the structure
        Point p1 = new Point(10, 20);
        p1.Display();

        // Copying the structure
        Point p2 = p1;
        p2.X = 30;
        p2.Display();

        // Display original structure to show it is not affected by the copy
        p1.Display();
    }
}

---------------------


	using System;

	public enum DaysOfWeek
	{
		Sunday,
		Monday,
		Tuesday,
		Wednesday,
		Thursday,
		Friday,
		Saturday
	}


	public class Program
	{
		public static void Main()
		{
			// Using enum in a switch statement
			DaysOfWeek today = DaysOfWeek.Tuesday;

			

			switch (today)
			{
				case DaysOfWeek.Sunday:
					Console.WriteLine("It's Sunday, time to relax!");
					break;
				case DaysOfWeek.Monday:
					Console.WriteLine("It's Monday, back to work!");
					break;
				case DaysOfWeek.Wednesday:
					Console.WriteLine("It's Wednesday, halfway through the week!");
					break;
				default:
					Console.WriteLine("It's another day of the week.");
					break;
			}

			// Convert enum to string
			string todayString = today.ToString();
			Console.WriteLine($"Today is {todayString}");

			// Convert string to enum
			string dayString = "Monday";
			DaysOfWeek day = (DaysOfWeek)Enum.Parse(typeof(DaysOfWeek), dayString);
			Console.WriteLine($"Parsed day: {day}");

		}
	}

------------------------------------

